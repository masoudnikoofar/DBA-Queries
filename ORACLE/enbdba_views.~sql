create user enbdba identified by dbaEnbankORACLEENBDBA;
grant dba to enbdba;
grant sysdba to enbdba;
-------------------------------------------------
CREATE OR REPLACE VIEW ENBDBA_ACTIVE_SQL AS
SELECT DISTINCT
          s.LAST_CALL_ET,
          s.seconds_in_wait time_wait,
          s.sid,
          t.SQL_TEXT,
          s.MACHINE,
          -- s.status,
          -- s.STATE,
          -- s.SECONDS_IN_WAIT,
          s.EVENT,
          s.SERIAL#,
          -- s.WAIT_CLASS,
          -- s.LOCKWAIT,
          s.OSUSER,
          s.SQL_ID,
          s.MODULE,
          s.ROW_WAIT_OBJ#,
             /*s.P1TEXT,
             s.P1,
             s.P2TEXT,
             s.P2,
             s.P3TEXT,
             s.p3,
             p.SPID,*/
             'alter system kill session '''
          || s.sid
          || ','
          || s.SERIAL#
          || ''' immediate;'
             Sessions,
          S.SQL_EXEC_START,
          s.seconds_in_wait,
          S.WAIT_TIME_MICRO,
          S.TIME_REMAINING_MICRO,
          S.TIME_SINCE_LAST_WAIT_MICRO,
          s.blocking_session,
          s.blocking_instance,
          s.username,
          server
     --   ,'kill -9 '||p.SPID Os_process
     FROM v$sql t, v$session s                                 --, v$process p
    WHERE s.SQL_ID = t.SQL_ID                          -- and p.ADDR = s.PADDR
                             AND S.WAIT_CLASS <> 'Idle';
------------------------------------------------------------------------------------------------------
create or replace view enbdba_ash as
select t.program,t.module, t.session_id,y.username,x.SQL_TEXT,to_char(t.sql_exec_start,'yyyy/mm/dd hh24:mi:ss','nls_calendar=persian') as sql_exec_start from DBA_HIST_ACTIVE_SESS_HISTORY t left join v$sql x
on x.SQL_ID=t.sql_id
left join dba_users y
on t.user_id=y.user_id
order by t.sql_exec_start;
------------------------------------------------------------------------------------------------------
create or replace view enbdba_ash2 as
select t.program,t.module, t.session_id,y.username,x.SQL_TEXT,to_char(t.sql_exec_start,'yyyy/mm/dd hh24:mi:ss','nls_calendar=persian') as sql_exec_start from v$active_session_history t left join v$sql x
on x.SQL_ID=t.sql_id
left join dba_users y
on t.user_id=y.user_id
order by t.sql_exec_start;
------------------------------------------------------------------------------------------------------
create or replace view enbdba_process as
select 'process' as name,count(*) as count from v$process t
union
select  'background process' as name,count(*) as count from v$bgprocess t;
------------------------------------------------------------------------------------------------------
CREATE OR REPLACE VIEW ENBDBA_RMAN AS
SELECT OPERATION, STATUS, MBYTES_PROCESSED, START_TIME, END_TIME from
V$RMAN_STATUS;
------------------------------------------------------------------------------------------------------
CREATE OR REPLACE VIEW ENBDBA_RMAN_PROGRESS AS
SELECT OPNAME, SID, SERIAL#, CONTEXT, SOFAR, TOTALWORK,
       ROUND(SOFAR/TOTALWORK*100,2) "% COMPLETE"
       FROM V$SESSION_LONGOPS
       WHERE OPNAME LIKE 'RMAN%' AND OPNAME NOT LIKE '%aggregate%'
       AND TOTALWORK != 0 AND SOFAR <> TOTALWORK;
------------------------------------------------------------------------------------------------------
create or replace view enbdba_running_jobs as
select owner , job_name , running_instance, session_id from all_scheduler_running_jobs
order by owner , job_name;
------------------------------------------------------------------------------------------------------
CREATE OR REPLACE VIEW SYS.ENBDBA_SEGMENTS AS
SELECT X.OWNER,SUM(X.BYTES)/1024/1024/1024 AS GBYTES FROM DBA_SEGMENTS X 
GROUP BY X.OWNER
ORDER BY 2 DESC;
------------------------------------------------------------------------------------------------------
CREATE OR REPLACE VIEW ENBDBA_SESSION AS
SELECT p.spid,
       s.username,
       s.program,
       y.sql_text,
       y.SQL_FULLTEXT,
       (case
     when trunc(y.elapsed_time/1000000)<60 then to_char(trunc(y.elapsed_time/1000000))||' Sec(s)'
     when trunc(y.elapsed_time/1000000/60)<60 then to_char(trunc(y.elapsed_time/1000000/60))||' Min(s)'
     when trunc(y.elapsed_time/1000000/60/60)<24 then to_char(trunc(y.elapsed_time/1000000/60/60))||'
Hour(s)'
     when trunc(y.elapsed_time/1000000/60/60/24)>=1  then
to_char(trunc(y.elapsed_time/1000000/60/60/24))||' Day(s)'
 end) as time,
       s.machine || '(' || s.osuser || ')' as osuser,
       'ALTER SYSTEM KILL SESSION ''' || s.SID || ',' || s.SERIAL# ||''' immediate;' kill_Command
  FROM gv$session s
  JOIN gv$process p
    ON p.addr = s.paddr
  JOIN gv$sql y
  on s.sql_id=y.sql_id
   AND p.inst_id = s.inst_id
   and s.status = 'ACTIVE'
   and s.USERNAME is not null
   order by s.username;
------------------------------------------------------------------------------------------------------
CREATE OR REPLACE VIEW ENBDBA_SESSION2 AS
SELECT a.STATUS, COUNT (1) AS Total, inst_id
       FROM gv$session a
      WHERE a.USERNAME IS NOT NULL
   GROUP BY a.STATUS, inst_id
   ORDER BY 1;
------------------------------------------------------------------------------------------------------
CREATE OR REPLACE VIEW SYS.ENBDBA_TABLESPACES AS
SELECT t.tablespace_name as Tablespace,
       t.status as Status,
       ROUND(MAX(d.bytes) / 1024 / 1024, 2) as Total,
       ROUND((MAX(d.bytes) / 1024 / 1024) -
             (SUM(decode(f.bytes, NULL, 0, f.bytes)) / 1024 / 1024),
             2) as Used,
       round(100 * (ROUND((MAX(d.bytes) / 1024 / 1024) -
                          (SUM(decode(f.bytes, NULL, 0, f.bytes)) / 1024 / 1024),
                          2)) / ROUND(MAX(d.bytes) / 1024 / 1024, 2)) as Used_p,
       ROUND(SUM(decode(f.bytes, NULL, 0, f.bytes)) / 1024 / 1024, 2) as Free,
       round(100 *
             (1 - (ROUND((MAX(d.bytes) / 1024 / 1024) -
                         (SUM(decode(f.bytes, NULL, 0, f.bytes)) / 1024 / 1024),
                         2)) / ROUND(MAX(d.bytes) / 1024 / 1024, 2))) as Free_p,
       ROUND(((MAX(d.bytes) -(SUM(decode(f.bytes, NULL, 0, f.bytes))))/ (1024 * 1024 * 1024 * 32)) * 100) as  Real_USED_p,
       t.pct_increase as increase_p,
       SUBSTR(d.file_name, 1, 80) as File_name,
       t.bigfile as bigfile
  FROM DBA_FREE_SPACE f, DBA_DATA_FILES d, DBA_TABLESPACES t
 WHERE t.tablespace_name = d.tablespace_name
   AND f.tablespace_name(+) = d.tablespace_name
   AND f.file_id(+) = d.file_id
 GROUP BY t.tablespace_name, d.file_name, t.pct_increase, t.status,t.bigfile
 order by 3 desc, 4 desc;
------------------------------------------------------------------------------------------------------
create or replace view enbdba_table_lock as
select a.session_id,
       a.oracle_username,
       a.os_user_name,
       b.owner "OBJECT OWNER",
       b.object_name,
       b.object_type,
       a.locked_mode
  from (select object_id,
               SESSION_ID,
               ORACLE_USERNAME,
               OS_USER_NAME,
               LOCKED_MODE
          from v$locked_object) a,
       (select object_id, owner, object_name, object_type from dba_objects) b
 where a.object_id = b.object_id;
------------------------------------------------------------------------------------------------------
create or replace view enbdba_table_lock2 as
select t2.username,
t2.sid,
t2.serial#,
t3.object_name,
t2.OSUSER,
t2.MACHINE,
t2.PROGRAM,
t2.LOGON_TIME,
t2.COMMAND,
t2.LOCKWAIT,
t2.SADDR,
t2.PADDR,
t2.TADDR,
t2.SQL_ADDRESS,
t1.LOCKED_MODE
from v$locked_object t1, v$session t2, dba_objects t3
where t1.session_id = t2.sid
and t1.object_id = t3.object_id
ORDER BY t2.logon_time;


-----------------
create or replace view enbdba_run_job_details as
select 
x.owner,x.job_name,x.status,to_char(x.req_start_date,'yyyy-mm-dd hh24:mi:ss','nls_calendar=persian') as req_start_date,x.additional_info
 from dba_scheduler_job_run_details
 order by 3 desc;

-----------------


create or replace view enbdba_failed_logins as
select USERID,
userhost,
decode(returncode,01017,'Login Error','Acount Locked') "ISSUE",
spare1,
TO_CHAR ( CAST(
( FROM_TZ(
CAST(
TO_DATE(
TO_CHAR( ntimestamp# , 'DD/MM/YYYY HH:MI PM'),
'DD/MM/YYYY HH:MI PM'
)
AS TIMESTAMP
) ,
'GMT'
) AT LOCAL
)
AS TIMESTAMP)
, 'DD/MM/YYYY HH:MI PM') "Time",
sqltext,
comment$text from SYS.aud$
where ( returncode=1017 OR returncode=28000 )
order by ntimestamp# desc ;

-----------------
CREATE OR REPLACE VIEW ENBDBA_TEMP_USAGE AS
SELECT p.spid,
       s.username,
       s.program,
       y.sql_text,
       z.TABLESPACE,
       (case
     when trunc(y.elapsed_time/1000000)<60 then to_char(trunc(y.elapsed_time/1000000))||' Sec(s)'
     when trunc(y.elapsed_time/1000000/60)<60 then to_char(trunc(y.elapsed_time/1000000/60))||' Min(s)'
     when trunc(y.elapsed_time/1000000/60/60)<24 then to_char(trunc(y.elapsed_time/1000000/60/60))||'
Hour(s)'
     when trunc(y.elapsed_time/1000000/60/60/24)>=1  then
to_char(trunc(y.elapsed_time/1000000/60/60/24))||' Day(s)'
 end) as time,
       s.machine || '(' || s.osuser || ')' as osuser,
       'ALTER SYSTEM KILL SESSION ''' || s.SID || ',' || s.SERIAL# ||''' immediate;' kill_Command
  FROM gv$session s
  left JOIN gv$process p
    ON p.addr = s.paddr
  left JOIN gv$sql y
  on s.sql_id=y.sql_id
   AND p.inst_id = s.inst_id
--   and s.status = 'ACTIVE'
   and s.USERNAME is not null
  right join v$sort_usage z
  on z.SESSION_ADDR=s.SADDR
   order by s.username;
---------------------------------
create or replace view sys.enbdba_datafile_resize as
with
 hwm as (
  -- get highest block id from each datafiles ( from x$ktfbue as we don't need all joins from dba_extents )
  select /*+ materialize */ ktfbuesegtsn ts#,ktfbuefno relative_fno,max(ktfbuebno+ktfbueblks-1) hwm_blocks
  from sys.x$ktfbue group by ktfbuefno,ktfbuesegtsn
 ),
 hwmts as (
  -- join ts# with tablespace_name
  select name tablespace_name,relative_fno,hwm_blocks
  from hwm join v$tablespace using(ts#)
 ),
 hwmdf as (
  -- join with datafiles, put 5M minimum for datafiles with no extents
  select file_name,nvl(hwm_blocks*(bytes/blocks),5*1024*1024) hwm_bytes,bytes,autoextensible,maxbytes
  from hwmts right join dba_data_files using(tablespace_name,relative_fno)
 )
select
 case when autoextensible='YES' and maxbytes>=bytes
 then -- we generate resize statements only if autoextensible can grow back to current size
  '/* reclaim '||to_char(ceil((bytes-hwm_bytes)/1024/1024),999999)
   ||'M from '||to_char(ceil(bytes/1024/1024),999999)||'M */ '
   ||'alter database datafile '''||file_name||''' resize '||ceil(hwm_bytes/1024/1024)||'M;'
 else -- generate only a comment when autoextensible is off
  '/* reclaim '||to_char(ceil((bytes-hwm_bytes)/1024/1024),999999)
   ||'M from '||to_char(ceil(bytes/1024/1024),999999)
   ||'M after setting autoextensible maxsize higher than current size for file '
   || file_name||' */'
 end SQL
from hwmdf
where
 bytes-hwm_bytes>1024*1024 -- resize only if at least 1MB can be reclaimed
order by bytes-hwm_bytes desc;

------------------
create or replace view sys.enbdba_audit_export as
select
'exp system/invalid tables=''sys.' || x.TABLE_NAME || ''' file='|| x.TABLE_NAME ||'.dmp log='|| x.TABLE_NAME || '.log  &' as command

 From dba_tables x where x.TABLE_NAME like 'AUD_13%';
 
----------------------
create or replace view sys.enbdba_datafile_resize as
with
 hwm as (
  -- get highest block id from each datafiles ( from x$ktfbue as we don't need all joins from dba_extents )
  select /*+ materialize */ ktfbuesegtsn ts#,ktfbuefno relative_fno,max(ktfbuebno+ktfbueblks-1) hwm_blocks
  from sys.x$ktfbue group by ktfbuefno,ktfbuesegtsn
 ),
 hwmts as (
  -- join ts# with tablespace_name
  select name tablespace_name,relative_fno,hwm_blocks
  from hwm join v$tablespace using(ts#)
 ),
 hwmdf as (
  -- join with datafiles, put 5M minimum for datafiles with no extents
  select file_name,nvl(hwm_blocks*(bytes/blocks),5*1024*1024) hwm_bytes,bytes,autoextensible,maxbytes
  from hwmts right join dba_data_files using(tablespace_name,relative_fno)
 )
select
 case when autoextensible='YES' and maxbytes>=bytes
 then -- we generate resize statements only if autoextensible can grow back to current size
  '/* reclaim '||to_char(ceil((bytes-hwm_bytes)/1024/1024),999999)
   ||'M from '||to_char(ceil(bytes/1024/1024),999999)||'M */ '
   ||'alter database datafile '''||file_name||''' resize '||ceil(hwm_bytes/1024/1024)||'M;'
 else -- generate only a comment when autoextensible is off
  '/* reclaim '||to_char(ceil((bytes-hwm_bytes)/1024/1024),999999)
   ||'M from '||to_char(ceil(bytes/1024/1024),999999)
   ||'M after setting autoextensible maxsize higher than current size for file '
   || file_name||' */'
 end SQL
from hwmdf
where
 bytes-hwm_bytes>1024*1024 -- resize only if at least 1MB can be reclaimed
order by bytes-hwm_bytes desc;
------------------------------------------------------------------------------------------------------
create or replace view enbdba_transactions as
select a.USERNAME,b.SQL_TEXT,c.XIDUSN || '.' || c.XIDSLOT || '.' || c.XIDSQN as trans_id
 From V$session a,v$sql b,v$transaction c
where a.sql_id=b.sql_id and a.TADDR=c.ADDR
--and (c.XIDUSN || '.' || c.XIDSLOT || '.' || c.XIDSQN) in (('35.13.47074'))
order by 1
--select x.* from v$transaction x --where (x.XIDUSN || '.' || x.XIDSLOT || '.' || x.XIDSQN) in ('34.24.66947');
